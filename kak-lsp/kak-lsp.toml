snippet_support = false
verbosity = 2

[server]

[language.rust]
filetypes = ["rust"]
roots = ["Cargo.toml"]
command = "rustup"
args = ["run","nightly", "rust-analyzer"]
# args = ["run","nightly", "rust-analyzer"]
offset_encoding = "utf-8"

[language.rust.settings]
rust.clippy_preference = "on"

[language.c_cpp]
filetypes = ["c", "cpp"]
roots = ["compile_flags.txt", "compile_commands.json"]
command = "clangd"
offset_encoding = "utf-8"

[language.tsx_jsx]
filetypes = ["typescript", "javascript"]
roots = ["package.json", "tsconfig.json"]
command = "npx"
args = ["--quiet", "typescript-language-server", "--stdio"]

[language.python]
filetypes = ["python"]
roots = ["requirements.txt", "setup.py", ".git", ".hg"]
offset_encoding = "utf-8"
command = "npx"
args = ["--quiet", "-p", "pyright", "pyright-langserver", "--stdio"]


[language.json]
filetypes = ["json"]
roots = ["package.json"]
command = "npx"
args = ["--quiet", "vscode-json-languageserver",  "--stdio"]

[language.yaml]
filetypes = ["yaml"]
roots = [".git"]
command = "npx"
args = ["--quiet", "yaml-language-server", "--stdio"]

[language.css]
filetypes = ["css"]
roots = ["package.json"]
command = "npx"
args = ["--quiet", "vscode-css-languageserver-bin", "--stdio"]

[language.html]
filetypes = ["html"]
roots = ["package.json"]
command = "npx"
args = ["html-languageserver", "--quiet", "--stdio"]

[language.java]
filetypes = ["java"]
roots = [".classpath", ".git"]
command = "jdtls-local"
args = ["--add-modules=ALL-SYSTEM", "--add-opens", "java.base/java.util=ALL-UNNAMED", "--add-opens", "java.base/java.lang=ALL-UNNAMED"]

[language.latex]
filetypes = ["latex"]
roots = [".git"]
command = "texlab"

[language.ocaml]
filetypes = ["ocaml"]
roots = ["Makefile", "opam", "*.opam", "dune", "_esy"]
command = "esy"
args = ["ocamllsp"]

[language.haskell]
filetypes = ["haskell"]
roots = ["Setup.hs", "stack.yaml", "*.cabal"]
command = "haskell-language-server-wrapper"
args = ["--lsp"]

# Semantic tokens support
# See https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textDocument_semanticTokens
# for the default list of tokens and modifiers.
# However, many language servers implement their own values.
# Make sure to check the output of `lsp-capabilities` and each server's documentation and source code as well.
# Examples:
# - TypeScript: https://github.com/microsoft/vscode-languageserver-node/blob/2645fb54ea1e764aff71dee0ecc8aceff3aabf56/client/src/common/semanticTokens.ts#L58
# - Rust Analyzer: https://github.com/rust-analyzer/rust-analyzer/blob/f6da603c7fe56c19a275dc7bab1f30fe1ad39707/crates/ide/src/syntax_highlighting.rs#L42
[[semantic_tokens]]
token = "comment"
face = "documentation"
modifiers = ["documentation"]

[[semantic_tokens]]
token = "comment"
face = "comment"

[[semantic_tokens]]
token = "function"
face = "function"

[[semantic_tokens]]
token = "keyword"
face = "keyword"

[[semantic_tokens]]
token = "namespace"
face = "module"

[[semantic_tokens]]
token = "operator"
face = "operator"

[[semantic_tokens]]
token = "string"
face = "string"

[[semantic_tokens]]
token = "type"
face = "type"

[[semantic_tokens]]
token = "variable"
face = "default+d"
modifiers = ["readonly"]

[[semantic_tokens]]
token = "variable"
face = "default+d"
modifiers = ["constant"]

[[semantic_tokens]]
token = "variable"
face = "variable"

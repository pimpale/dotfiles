# set colorscheme
# gruvbox theme

colorscheme mygruvbox

# highlighters
add-highlighter global/ number-lines
add-highlighter global/ show-matching
add-highlighter global/ show-whitespaces

# no clippy
set-option global ui_options ncurses_assistant=off
# no startup info
set-option global startup_info_version 99990000

# show value
set-option -add global modelinefmt '  U+%sh{printf "%04x" "$kak_cursor_char_value"}'

# space + tabs
set-option global tabstop 2

# tab complete
hook global InsertCompletionShow .* %{
    try %{
      execute-keys -draft 'h<a-K>\h<ret>'
      map window insert <tab> <c-n>
      map window insert <s-tab> <c-p>
    }
}

hook global InsertCompletionHide .* %{
  unmap window insert <tab> <c-n>
  unmap window insert <s-tab> <c-p>
}

# leader mode starts with space instead of comma
map global normal <space> , -docstring "leader"
map global normal <esc> <space> -docstring "clear selections"

# enter into command mode with leader e
map global user <space> ':' -docstring "enter command"

# from kakoune-text-objects, but mapped to v instead like vim
try %{ declare-user-mode selectors }
map global normal 'v' ': enter-user-mode selectors<ret>' -docstring 'selectorsâ€¦'
map global selectors 'u' '*%s<ret>' -docstring 'select all'
map global selectors 'i' '<a-i>' -docstring 'select inside object <a-i>'
map global selectors 'a' '<a-a>' -docstring 'select outside object <a-a>'
map global selectors 'j' '<a-[>' -docstring 'select inner object start <a-[>'
map global selectors 'k' '<a-]>' -docstring 'select inner object end <a-]>'
map global selectors 'J' '<a-{>' -docstring 'extend inner object start <a-{>'
map global selectors 'K' '<a-}>' -docstring 'extend inner object end <a-}>'
map global selectors 'h' '[' -docstring 'select object start ['
map global selectors 'l' ']' -docstring 'select object end ]'
map global selectors 'H' '{' -docstring 'extend object start {'
map global selectors 'L' '}' -docstring 'extend object end }'
map global normal '%' nop

# Typos with writing
define-command W -docstring "miscapped write" %{ write }
define-command Wa -docstring "miscapped write" %{ write-all }
define-command Waq -docstring "miscapped write" %{ write-all-quit }
define-command Wqa -docstring "miscapped write" %{ write-all-quit }

# Install kak plugs
evaluate-commands %sh{
    # kak plugin directory
    PLUGIN_DIRECTORY="$HOME/.kakplugins"
    KAK_PLUG="$PLUGIN_DIRECTORY/plug.kak/rc/plug.kak"

    # if does not exist, create it and git clone kak plug
    if [ -f $KAK_PLUG ]; then
        echo source $KAK_PLUG
    else
        mkdir -p $PLUGIN_DIRECTORY
        echo echo "installing plugins..."
        git clone "https://github.com/andreyorst/plug.kak" "$PLUGIN_DIRECTORY/plug.kak" > /dev/null 
        GIT_RET_CODE=$?
        if [ "$GIT_RET_CODE" -eq "0" ]; then
            echo echo "kak.plug installed successfully"
            echo source $KAK_PLUG
        else
            echo echo "failed to install kak.plug"
        fi
    fi
}

# plugins
plug "https://github.com/robertmeta/plug.kak" noload config %{
    set-option global plug_install_dir %sh{ echo $HOME/.kakplugins }
}
plug "https://github.com/pimpale/kak-lspconfigure" ensure
plug "https://github.com/occivink/kakoune-sudo-write" ensure
plug  "https://github.com/ftonneau/wordcount.kak" ensure
plug "https://github.com/bodhizafa/kak-rainbow" ensure config %{
  hook global WinSetOption filetype=(rust|python|c|c++|scheme|lisp|clojure|javascript|json) %{
          rainbow-enable-window
  }
}
plug "https://github.com/insipx/kak-crosshairs" ensure config %{
    crosshairs
}
plug "https://github.com/delapouite/kakoune-text-objects" ensure
plug "https://github.com/leperdu/kakboard" ensure config %{
    hook global WinCreate .* %{ kakboard-enable }
}
plug "https://github.com/Delapouite/kakoune-i3" ensure config %{
    define-command split -docstring "split along a horizontal line" %{
        i3-new-down
    }
    define-command vsplit -docstring "split along a vertical line" %{
        i3-new-right
    }
    define-command term -docstring "spawn a new zsh terminal" %sh{
        echo x11-terminal $SHELL
        echo quit
    }
}

plug "ul/kak-lsp" ensure do %{
    cargo install --locked --force --path .
} config %{
    # uncomment to enable debugging
    # eval %sh{echo ${kak_opt_lsp_cmd} >> /tmp/kak-lsp.log}
    # set global lsp_cmd "kak-lsp -s %val{session} -vvv --log /tmp/kak-lsp.log"

    # this is not necessary; the `lsp-enable-window` will take care of it
    # eval %sh{${kak_opt_lsp_cmd} --kakoune -s $kak_session}

    set-option global lsp_diagnostic_line_error_sign "!"
    set-option global lsp_diagnostic_line_warning_sign "?"

    define-command lsp-restart -docstring 'restart lsp server' %{ lsp-stop; lsp-start }
    hook global WinSetOption filetype=(c|cpp|rust|javascript|typescript|python|json|html|java|latex) %{
        set-option window lsp_auto_highlight_references true
        set-option window lsp_hover_anchor false
        lsp-auto-hover-disable
        echo -debug "Enabling LSP for filtetype %opt{filetype}"
        lsp-enable-window

        map window user "l" ": enter-user-mode lsp<ret>" -docstring "LSP mode"
        map window lsp "n" "<esc>: lsp-find-error --include-warnings<ret>" -docstring "find next error or warning"
        map window lsp "p" "<esc>: lsp-find-error --previous --include-warnings<ret>" -docstring "find previous error or warning"
    }

    hook global WinSetOption filetype=(rust) %{
        set-option window lsp_server_configuration rust.clippy_preference="on"
        hook window BufWritePre .* %{
            evaluate-commands %sh{
                test -f rustfmt.toml && printf lsp-formatting-sync
            }
        }
    }

    hook global WinSetOption filetype=(latex) %{
        # Line Wrapping
        add-highlighter window/ wrap -indent -width 120
    }

    hook global KakEnd .* lsp-exit
}

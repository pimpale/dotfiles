# set colorscheme
# gruvbox theme

colorscheme mygruvbox

# highlighters
add-highlighter global/ number-lines
add-highlighter global/ show-matching
add-highlighter global/ show-whitespaces

# no clippy
set-option global ui_options ncurses_assistant=off
# no startup info
set-option global startup_info_version 99990000

# show value
set-option -add global modelinefmt '  U+%sh{printf "%04x" "$kak_cursor_char_value"}'

# space + tabs
set-option global tabstop 2

# tab complete
hook global InsertCompletionShow .* %{
    try %{
      execute-keys -draft 'h<a-K>\h<ret>'
      map window insert <tab> <c-n>
      map window insert <s-tab> <c-p>
    }
}

hook global InsertCompletionHide .* %{
  unmap window insert <tab> <c-n>
  unmap window insert <s-tab> <c-p>
}

# enter into command mode with leader e
map global user <space> ':' -docstring "enter command"

# Typos with writing
define-command W -docstring "miscapped write" %{ write }
define-command Wa -docstring "miscapped write" %{ write-all }
define-command Waq -docstring "miscapped write" %{ write-all-quit }
define-command Wqa -docstring "miscapped write" %{ write-all-quit }

# Tmux vsplit if running in tmux
hook global ModuleLoaded tmux %{
    define-command -docstring "vsplit [<commands>]: split tmux vertically" \
    vsplit -params .. -command-completion %{
        tmux-terminal-horizontal kak -c %val{session} -e "%arg{@}"
    }

    define-command -docstring "split [<commands>]: split tmux horizontally" \
    split -params .. -command-completion %{
        tmux-terminal-vertical kak -c %val{session} -e "%arg{@}"
    }

    define-command -docstring "tabnew [<commands>]: create new tmux window" \
    tabnew -params .. -command-completion %{
        tmux-terminal-window kak -c %val{session} -e "%arg{@}"
    }

    define-command -docstring "spawn new term" term %sh{
        echo tmux-terminal-vertical $SHELL
    }
}



# Install kak plugs
evaluate-commands %sh{
    # kak plugin directory
    PLUGIN_DIRECTORY="$HOME/.kakplugins"
    KAK_PLUG="$PLUGIN_DIRECTORY/plug.kak/rc/plug.kak"

    # if does not exist, create it and git clone kak plug
    if [ -f $KAK_PLUG ]; then
        echo source $KAK_PLUG
    else
        mkdir -p $PLUGIN_DIRECTORY
        echo echo "installing plugins..."
        git clone "https://github.com/andreyorst/plug.kak" "$PLUGIN_DIRECTORY/plug.kak" > /dev/null 
        GIT_RET_CODE=$?
        if [ "$GIT_RET_CODE" -eq "0" ]; then
            echo echo "kak.plug installed successfully"
            echo source $KAK_PLUG
        else
            echo echo "failed to install kak.plug"
        fi
    fi
}

# plugins
plug "https://github.com/robertmeta/plug.kak" noload config %{
    set-option global plug_install_dir %sh{ echo $HOME/.kakplugins }
}
plug "https://github.com/occivink/kakoune-sudo-write" ensure
plug "https://github.com/ftonneau/wordcount.kak" ensure
plug "https://github.com/insipx/kak-crosshairs" ensure config %{
    crosshairs
}

try %{ declare-user-mode selectors }
map global normal 'v' ': enter-user-mode selectors<ret>' -docstring 'selectorsâ€¦'
map global selectors 'u' '*%s<ret>' -docstring 'select all'
map global selectors 'i' '<a-i>' -docstring 'select inside object <a-i>'
map global selectors 'a' '<a-a>' -docstring 'select outside object <a-a>'
map global selectors 'j' '<a-[>' -docstring 'select inner object start <a-[>'
map global selectors 'k' '<a-]>' -docstring 'select inner object end <a-]>'
map global selectors 'J' '<a-{>' -docstring 'extend inner object start <a-{>'
map global selectors 'K' '<a-}>' -docstring 'extend inner object end <a-}>'
map global selectors 'h' '[' -docstring 'select object start ['
map global selectors 'l' ']' -docstring 'select object end ]'
map global selectors 'H' '{' -docstring 'extend object start {'
map global selectors 'L' '}' -docstring 'extend object end }'
map global normal '%' nop


map global normal 'm' '<a-j>' -docstring 'merge this line up'


plug 'https://github.com/delapouite/kakoune-text-objects' ensure config %{
}
plug "https://github.com/leperdu/kakboard" ensure config %{
    hook global WinCreate .* %{ kakboard-enable }
}
plug "https://github.com/Delapouite/kakoune-i3" ensure config %{
    hook global ModuleLoaded x11 %{
        define-command split -docstring "split along a horizontal line" %{
            i3-new-down
        }
        define-command vsplit -docstring "split along a vertical line" %{
            i3-new-right
        }
        define-command term -docstring "spawn a new terminal in the current window" %sh{
            echo terminal $SHELL
        }
    }
}
plug "https://github.com/mreppen/kakoune-sway" ensure config %{
    hook global ModuleLoaded wayland %{
        define-command split -docstring "split along a horizontal line" %{
            sway-new-down
        }
        define-command vsplit -docstring "split along a vertical line" %{
            sway-new-right
        }
        define-command term -docstring "spawn a new terminal in the current window" %sh{
            echo terminal $SHELL
        }
    }
}
plug "https://github.com/pimpale/kak-preservecase" ensure do %{
    cargo install --locked --force --path .
} config %{
    map global user s ': preserve-case ' -docstring 'case sensitive replace'
}
plug "https://github.com/dmerejkowsky/kak-subvert" ensure do %{
    cargo install --locked --force --path .
} noload config %{
    declare-user-mode subvert
    map global user n ': enter-user-mode subvert<ret>' -docstring 'enter subvert user mode'
    map global subvert c '<esc>| kak-subvert camel<ret>' -docstring 'convert to camel case'
    map global subvert k '<esc>| kak-subvert kebab<ret>' -docstring 'convert to kebab case'
    map global subvert p '<esc>| kak-subvert pascal<ret>' -docstring 'convert to pascal case'
    map global subvert . '<esc>| kak-subvert sentence<ret>' -docstring 'convert to sentence case'
    map global subvert s '<esc>| kak-subvert snake<ret>' -docstring 'convert to snake case'
    map global subvert S '<esc>| kak-subvert screaming<ret>' -docstring 'convert to screaming case'
    map global subvert t '<esc>| kak-subvert train<ret>' -docstring 'convert to train case'
    map global subvert T '<esc>| kak-subvert title<ret>' -docstring 'convert to title case'
    map global subvert u '<esc>| kak-subvert ugly<ret>' -docstring 'convert to ugly case'
}
plug "https://github.com/h-youhei/kakoune-surround" ensure config %{
    declare-user-mode surround
    map global user r ': enter-user-mode surround<ret>' -docstring 'enter surround user mode'
    map global surround s ': surround<ret>' -docstring 'surround'
    map global surround c ': change-surround<ret>' -docstring 'change'
    map global surround d ': delete-surround<ret>' -docstring 'delete'
    map global surround t ': select-surrounding-tag<ret>' -docstring 'select tag'
}
plug "https://github.com/ul/kak-lsp" ensure do %{
    cargo install --locked --force --path .
} config %{
    # uncomment to enable debugging
    eval %sh{echo ${kak_opt_lsp_cmd} >> /tmp/kak-lsp.log}
    set global lsp_cmd "kak-lsp -v -s %val{session} --log /tmp/kak-lsp.log"

    hook global WinSetOption filetype=(c|cpp|rust|javascript|typescript|python|json|yaml|css|html|zig|ocaml|java|latex|haskell|lean|lean4) %{
        echo -debug "Enabling LSP for filetype %opt{filetype}"

        lsp-enable-window

        map window user "l" ": enter-user-mode lsp<ret>" -docstring "LSP mode"
        map window lsp "n" "<esc>: lsp-find-error --include-warnings<ret>" -docstring "find next error or warning"
        map window lsp "p" "<esc>: lsp-find-error --previous --include-warnings<ret>" -docstring "find previous error or warning"


        hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
        hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
        hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
        hook -once -always window WinSetOption filetype=.* %{
          remove-hooks window semantic-tokens
        }
    }

    hook global WinSetOption filetype=(json|yaml) %{
    }

    hook global WinSetOption filetype=(latex) %{
        # Line Wrapping
        add-highlighter window/ wrap -indent -width 120
    }

    hook global KakEnd .* lsp-exit
}

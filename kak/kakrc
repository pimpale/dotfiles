# set colorscheme
# gruvbox theme

colorscheme gruvbox
set-face global comment rgb:928374

define-command ttygruvbox -docstring "gruvbox colorscheme for tty" %{
        # Code highlighting
        set-face global value         magenta+b
        set-face global type          yellow+b
        set-face global variable      blue+b
        set-face global module        green+b
        set-face global function      white+b
        set-face global string        green+b
        set-face global keyword       red+b
        set-face global operator      white+b
        set-face global attribute     yellow
        set-face global comment       black+b
        set-face global documentation comment
        set-face global meta          cyan
        set-face global builtin       cyan

        # Markdown highlighting
        set-face global title     green
        set-face global header    yellow+b
        set-face global mono      cyan
        set-face global block     cyan
        set-face global link      blue+u
        set-face global bullet    yellow+b
        set-face global list      white+b

        set-face global Default            white,black
        set-face global PrimarySelection   white,blue+bfg
        set-face global SecondarySelection black,blue+bfg
        set-face global PrimaryCursor      black,white+bfg
        set-face global SecondaryCursor    black,white+bfg
        set-face global PrimaryCursorEol   black,white+bfg
        set-face global SecondaryCursorEol black,white+bfg
        set-face global LineNumbers        black+b
        set-face global LineNumberCursor   yellow,black+b
        set-face global LineNumbersWrapped black+b
        set-face global MenuForeground     magenta,black
        set-face global MenuBackground     white,black
        set-face global MenuInfo           white+b
        set-face global Information        black,white+b
        set-face global Error              black,red+b
        set-face global StatusLine         white,black+b
        set-face global StatusLineMode     yellow+b
        set-face global StatusLineInfo     magenta+b
        set-face global StatusLineValue    red+b
        set-face global StatusCursor       black,white+b
        set-face global Prompt             yellow+b
        set-face global MatchingChar       white,magenta+b
        set-face global BufferPadding      black,black+bfg
        set-face global Whitespace         black+bf
}

# highlighters
add-highlighter global/ number-lines
add-highlighter global/ show-matching
add-highlighter global/ show-whitespaces

# no clippy
set-option global ui_options ncurses_assistant=off
# no startup info
set-option global startup_info_version 99990000

# tab complete
hook global InsertCompletionShow .* %{
    try %{
      execute-keys -draft 'h<a-K>\h<ret>'
      map window insert <tab> <c-n>
      map window insert <s-tab> <c-p>
    }
}

hook global InsertCompletionHide .* %{
  unmap window insert <tab> <c-n>
  unmap window insert <s-tab> <c-p>
}

# leader mode
map global normal <space> , -docstring "leader"
# clear selections
map global normal <esc> <space> -docstring "clear selections"

# text objects selection mode
#declare-user-mode sel
#map global sel i <a-i> -docstring "select inner object"
#map global sel a <a-a> -docstring "select outer object"

# Typos with writing
define-command W -docstring "miscapped write" %{ write }
define-command Wa -docstring "miscapped write" %{ write-all }
define-command Waq -docstring "miscapped write" %{ write-all-quit }
define-command Wqa -docstring "miscapped write" %{ write-all-quit }

# Install kak plugs
evaluate-commands %sh{
    # kak plugin directory
    PLUGIN_DIRECTORY="$HOME/.kakplugins"
    KAK_PLUG="$PLUGIN_DIRECTORY/plug.kak/rc/plug.kak"

    # if does not exist, create it and git clone kak plug
    if [ -f $KAK_PLUG ]; then
        echo source $KAK_PLUG
    else
        mkdir -p $PLUGIN_DIRECTORY
        echo echo "installing plugins..."
        git clone "https://github.com/andreyorst/plug.kak" "$PLUGIN_DIRECTORY/plug.kak" > /dev/null 
        GIT_RET_CODE=$?
        if [ "$GIT_RET_CODE" -eq "0" ]; then
            echo echo "kak.plug installed successfully"
            echo source $KAK_PLUG
        else
            echo echo "failed to install kak.plug"
        fi
    fi
}

# plugins
set-option global plug_install_dir %sh{ echo $HOME/.kakplugins }
plug "https://github.com/robertmeta/plug.kak" noload
plug "https://github.com/occivink/kakoune-sudo-write" ensure
plug "https://github.com/delapouite/kakoune-palette" ensure

plug "https://github.com/andreyorst/smarttab.kak" ensure  defer expandtab %{
    set-option global tabstop 2
    set-option global softtabstop 2
} config %{
    # these languages will use `expandtab' behavior
    hook global WinSetOption filetype=(c|cpp|rust|typescript|javascript|python|markdown) expandtab
    # these languages will use `noexpandtab' behavior
    hook global WinSetOption filetype=(makefile|gas) noexpandtab
}

plug "https://github.com/delapouite/kakoune-text-objects" ensure config %{
    text-object-map
    # disable using % to select file, use vf
    hook -always global WinSetOption .*  map global normal % nop

    map global normal v ":enter-user-mode selectors <ret>" -docstring "select object mode"
}

plug "https://github.com/leperdu/kakboard" ensure config %{
    hook global WinCreate .* %{ kakboard-enable }
}
plug "https://github.com/Delapouite/kakoune-i3" ensure config %{
    define-command split -docstring "split along a horizontal line" %{
        i3-new-down
    }
    define-command vsplit -docstring "split along a vertical line" %{
        i3-new-right
    }
    define-command term -docstring "spawn a new zsh terminal" %{
        x11-terminal zsh
        quit
    }
}

# kak-lsp
eval %sh{kak-lsp --kakoune -s $kak_session}
lsp-enable

# C++ and other languages
define-command lsp-restart %{ lsp-stop; lsp-start }
set-option global lsp_completion_trigger "execute-keys 'h<a-h><a-k>\S[^\s,=;*(){}\[\]]\z<ret>'"
set-option global lsp_diagnostic_line_error_sign "!"
set-option global lsp_diagnostic_line_warning_sign "?"
hook global WinSetOption filetype=(c|cpp|rust|typescript|javascript|python) %{
    map window user "l" ": enter-user-mode lsp<ret>" -docstring "LSP mode"
    map window lsp "n" "<esc>: lsp-find-error --include-warnings<ret>" -docstring "find next error or warning"
    map window lsp "p" "<esc>: lsp-find-error --previous --include-warnings<ret>" -docstring "find previous error or warning"
    hook -always global KakEnd .* lsp-exit
    set-option window lsp_hover_anchor true
    set-face window DiagnosticError default+u
    set-face window DiagnosticWarning default+u
    lsp-enable-window
    lsp-auto-hover-insert-mode-disable
}

hook global WinSetOption filetype=rust %{
    set-option window lsp_server_configuration rust.clippy_preference="on"
}
